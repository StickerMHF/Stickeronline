<template>
  <div class="FormIndex">
  		<!--主体编辑部分-->
  		<transition name="el-zoom-in-top">
  		<div>
  				<div>
			   		<div class="form-header">
              <form-side  :oid = 'oid' ></form-side>
			   			<form-header :oid = 'oid'></form-header>
			   		</div>

			   		<div class="form-main">
              <div style="display: inline-block;width: 100%;height: 100%;"   @click.stop="setMain">
                <form-content :oid = 'oid'></form-content>
              </div>

              <form-set ref="formSet"  :oid = 'oid'></form-set>
            </div>
		   		</div>

  		</div>
  	</transition>
  </div>
</template>

<script>

	import formHeader from './formtemp/formheader.vue';
	import formContent from './formtemp/formcontent.vue';
	import formSide from './formtemp/formside.vue';
	import formSet from './formtemp/formset.vue';
	import {mapGetters,mapActions} from 'vuex'

export default {
  name: 'FormIndex',
  components:{
  	'formHeader':formHeader,
  	'formContent':formContent,
  	'formSide':formSide,
  	'formSet':formSet,

  },
  data () {
    return {
      open:true,
      oid:'',

    }
  },
   computed: {
			...mapGetters([
				'getForm'
			])
		},
  methods:{
  		...mapActions([
        		'_upData',
        		'_setCurrent',
        		'_cleanUp',
        		'_setCanvas'
			]),
      setMain(){
//  		    console.log(this.$refs.formSet)
          this.$refs.formSet.mainset = true;
      },
			initEvent(){
        let that = this;


			},
			initData(){
        let that = this;
					let url = 'formdesign/forms/'+this.oid;
//					let url = 'http://localhost:80/fz/json.php?f=oneform';
					this.$http.get(url).then((res)=>{
		      	console.log('oneform',res);
		      	let odata = res.data.data;
		      	let widgetList = JSON.parse(odata.formcontent);
		      	delete odata.formcontent;
		      	odata.style = JSON.parse(odata.style);
		      	let data = {widgetList:widgetList,formConfig:odata};

		      	console.log('data',data)
//							let data = res.data[0]
		        	that._upData({data});
		        	that._setCurrent({attr:'currentOid',value:that.oid})
		        	that._setCurrent({attr:'hasData',value:true})

			    }).catch((err)=>{
			    	console.log(err)
			    });

			},
			saveForm(){
				// 保存数据

				let that = this;
				let addUrl = 'formdesign/forms/add' // 添加的接口

					let prams = 'data='+JSON.stringify({
						widgetList:that.getForm.widgetList,
						formConfig:that.getForm.formConfig
					});
//					console.log(this.getForm);
//					console.log(prams);

					prams = encodeURI(prams);
//					console.log(prams)
					// 判断是否是二次编辑 ，如果是二次编辑，需要调用更新的接口

					that.$http.post(addUrl,prams)
			      	.then(
			      		(res) => {
			      			console.log(res.data.message);
			      			if(res.data.result === true){
			      				// 上传成功
			      				// 跳转到。。。。
			      				that.$notify.success({
						          title: '提交成功！',
						          message: '提交成功！！！',
						          offset: 100
						        });

			      			}else{
			      				that.$notify.error({
						          title: '保存失败！',
						          message: '保存失败！！！ ',
						          offset: 100
						        });
			      			}

			      		}
			      	).catch((error) => {
			      		console.log("出错了",error);
			      	});

			},

	},
		created(){
      let that = this;
			this.oid = this.$route.params.id;
			let type = this.$route.params.type

//			console.log(type);
//			console.log(this.$route.params.hasEdit);
//			console.log(this.oid,this.getForm.editState.currentOid);


			this._setCurrent({attr:'hasData',value:true});
			this.initEvent();
			if(this.getForm.editState.currentOid !== this.oid && this.oid !== 'new'){
					this.initData();
			}

	},
	mounted(){

	},
	beforeRouteLeave(to, from, next){
		let that = this;
		if(to.name !== "appformpreview" && to.name !== "showformpreview" ){

			// 自定义一个提示框

			this.$confirm('是否保存已编辑的数据?', '提示', {
		      confirmButtonText: '确定',
		      cancelButtonText: '取消',
		      type: 'warning'
		   }).then(() => {

		   		// 保存数据之后 跳转路由
		   	that.saveForm();
		     next(true);

		   }).catch(() => {
		    	// 取消保存 清空路由之后跳转
		      that._cleanUp();
          next(true);
		    });

		}else{
			next(true);
		}

	},
	beforeDestroy(){

	}


}

</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style lang="less" scoped>
@icon-base : '../../assets/formDesign/img/';
.model-bg{
	width: 100%;
	height: 100%;
	background-color: rgba(0,0,0,0.7);
	position: fixed;
	top: 0;
	left: 0;
	.model-box{
		color: #333333;
		position: absolute;
		width: 600px;
		height: 420px;
		margin-left: -300px;
		top: 200px;
		left: 50%;
		background-color: #FFF;
		border-radius: 6px;
		.model-header{
			height: 30px;
			border-bottom: 1px solid #E5E9ED;
		}
		.model-content{
			padding-top: 30px;
			ul{
				width: 100%;
				height: 100%;
				position: relative;
				display: flex;
				justify-content: space-around;
				align-items: center;
				.form-type{
					cursor: pointer;
					height: 250px;
					width: 180px;
					border: 1px solid #E5E9ED;
					padding-top: 180px;
					box-sizing: border-box;
					line-height: 60px;
					font-size: 16px;
					background-position: center 20px;
					background-repeat:no-repeat;
					background-size: 120px 120px;

				}
				.app-form{
					background-image: url('@{icon-base}appform.png');
					&:hover{
						background-image: url('@{icon-base}appform-hover.png');
						color: #66CCFF;
						box-shadow: 0 6px 6px rgba(0, 0, 0, .175);
					}
				}
				.show-form{
					background-image: url('@{icon-base}showform.png');
					&:hover{
						background-image: url('@{icon-base}showform-hover.png');
						color: #66CCFF;
						box-shadow: 0 6px 6px rgba(0, 0, 0, .175);
					}
				}
			}
		}

	}
}
	.FormIndex{
		font-family: "Microsoft YaHei";
		color: #333333;
		text-align: center;
		overflow: hidden;
		flex-grow: 1;
		position: relative;
		height: 100%;
		.form-header{
			padding-left:100px;
			border-bottom: 1px solid #BFCBD9;
			height: 100px;
			box-sizing: border-box;
      display: flex;
      justify-content: space-between;
      align-items: center;
		}
		.form-main{
			height: calc(100% - 100px);
			display: flex;
			overflow: hidden;
			justify-content: space-between;
			align-items: flex-start;
			min-height: 700px;

		}


	}


</style>
