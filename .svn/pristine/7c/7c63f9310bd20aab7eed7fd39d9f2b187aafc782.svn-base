<template>
	<div class="folder_list" id="tree-folder">
				<div class="sub_ui_title">
					<h3>分类目录</h3></div>
				<el-tree style="" :data="treedata" node-key="id" default-expand-all :expand-on-click-node="false" :render-content="renderContent">

				</el-tree>
			</div>
</template>

<script>let id = 1000;
export default {
	name: 'tree-folder',
	data() {
		return {
			treedata: [{
				id: 999,
				name: '文件夹',
			}],
			isleaveul: false,
			isleaveli: false,
		}
	},
	methods: {

		createname(callback) {
			const h = this.$createElement;
			this.$msgbox({
						title:'消息',
				customClass: 'messagestyle',
				message: h('p', {
					style: 'height:32px;padding: 0 50px;'
				}, [
					h('div', {
						style: 'line-hight:32px;display: inline-block;color: #999;'
					}, '目录名称： '),
					h('div', {
						style: 'color: teal;display: inline-block;width:265px;'
					}, [
						h('input', {
							style: 'width: 100%;line-height: 28px;border: 1px solid #ddd;'
						}, '22')
					])
				]),
				showCancelButton: true,
				confirmButtonText: '确定',
				cancelButtonText: '取消'
			}).then(action => {
				if(typeof callback === "function") {
					callback("是");
				}
			}).catch(() => {
				if(typeof callback === "function") {
					callback("是");
				}
			});
		},
		showmenu(store, data, evt) {
			var evtTargetThis = evt.target.parentElement.parentElement.children[2];
			if(evtTargetThis.style.display =="block") {
			evtTargetThis.style.display = "none";
		} else {
			evtTargetThis.style.display = "block";
		}

	},
	add(store, data, evt) {
		this.createname(function(name) {
					store.append({
								id: id++,
								label:'文件夹' + id,
						children: []
					}, data);
					debugger;

				})


			},
			remove(store, data) {
				store.remove(data);
			},
			mouseOver(store, data, evt){

				evt.target.children[1].style.display='block';
			},
			mouseOutLi(store, data, evt){
				this.isleaveli=true;
				evt.target.children[1].style.display='none';
				if(this.isleaveli==true&this.isleaveul==true){
					debugger
					evt.target.children[1].style.display='none';
					evt.target.children[2].style.display='none';
					this.isleaveli=false;
				}else {
          evt.target.children[1].style.display='none';
          evt.target.children[2].style.display='none';
        }

			},
			mouseOutUl(store, data, evt){
				this.isleaveul=true;
//				evt.target.children[1].style.display='none';
//				if(evt.target.targetName=="ul"){
//					console.log("22")
//				}
//debugger
        evt.target.parentElement.children[1].style.display='none';
				if(this.isleaveli=this.isleaveul){
//					debugger

					evt.target.style.display='none';
					this.isleaveul=false;
								}
				console.log(evt.target)
				evt.target.style.display='none';
			},
			renderContent(h, {
				node,
				data,
				store
			}) {
				return(
					<ul class="tree_folder">
					 <li style=" box-sizing:border-box;" on-mouseenter={ (evt) => this.mouseOver(store, data,evt) } on-mouseleave={ (evt) => this.mouseOutLi(store, data,evt) }>
                         <span>
                             <span class="treename">未命名文件夹</span>
                         </span>
                         <span style="float: right; display:none; margin-right:20px; position:absolute; top:0;right:0;" class="icon_bar">
                             <i class="fa fa-bars"  on-click={ (evt) => this.showmenu(store, data,evt) }></i>
                         </span>
                            <ul class="tree_menu" on-mouseleave={ (evt) => this.mouseOutUl(store, data,evt) } style="position: absolute;right: 15px;top: 30px;font-size: 12px;line-height: 16px; z-index:9; display:none; border:1px solid #ccc;background:#fff;">
                                <li style="line-height: 32px;" on-click={ () => this.add(store, data) }><div  style="padding:3px 8px;"><i class="fa fa-plus"></i><span>创建子目录</span></div></li>
                                <li style="line-height: 32px;" on-click={ () => this.remove(store, data) }><div  style="padding:3px 8px;"><i class="el-icon-edit"></i><span>重命名</span></div></li>
                                <li style="line-height: 32px;" on-click={ () => this.remove(store, data) }><div  style="padding:3px 8px;"><i class="el-icon-delete"></i><span>删除</span></div></li>
                             </ul>
                      </li>
                      </ul>
				);

			}
		},
		updateTreeData(){

		},
		addTreeData(){

		},
		created() {

		},
		mounted() {

		}
	}
</script>

<style >
	.el-tree {
		cursor: default;
		background: #f9f9f9;
		border: 0px;
		font-size: 12px;

	}
	.treename{
		font-size: 12px;
	}

	.el-tree-node>.el-tree-node__children {
		overflow: visible;
	}
	.sub_ui_title {
		border-bottom: 1px solid #e5e9ed;
		height: 35px;
		padding: 0 15px;
		margin-bottom: 10px;
	}
	.tree_folder{
		float: left;
		width:70%;
		box-sizing: border-box;
	}
	.el-tree-node__content{
		position: relative;
	}
	.el-tree-node__expand-icon{
		float: left;
		margin:0;
		margin-top:10px;
		margin-right: 8px;
		margin-left:12px;
	}
	.sub_ui_title h3 {
		display: inline-block;
		line-height: 33px;
		border-bottom: 3px solid #333;
		font-size: 12px;
		font-weight: bold;
		color: #333;
		margin: 0;
	}
	.tree_menu li:hover{
		background: #ccc;
	}
	.el-tree-node__expand-icon{
		border:none;
	}
	/*替换下三角*/
	.el-tree-node__expand-icon{
		display: block;
		width:16px;
		height:16px;
		background: url("/static/Login/img/login_ico.png") no-repeat ;
		background-size: 250px 160px;
		background-position: -148px -6px;
	}
	.expanded{
		background-position: -181px -6px;
		transform: rotate(0deg) !important;
	}
</style>
